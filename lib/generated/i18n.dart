import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Подождите, идёт загрузка..."
  String get loading => "Подождите, идёт загрузка...";
  /// "typograph"
  String get title => "typograph";
  /// "Название отсутствует"
  String get noTitle => "Название отсутствует";
  /// "Описание отсутствует"
  String get noDesc => "Описание отсутствует";
  /// "Местоположение не установлено"
  String get noLocation => "Местоположение не установлено";
  /// "Рекомендуемые"
  String get recommend => "Рекомендуемые";
  /// "Все"
  String get all => "Все";
  /// "Выступления"
  String get performances => "Выступления";
  /// "Расписание"
  String get schedule => "Расписание";
  /// "Аккаунт"
  String get account => "Аккаунт";
  /// "Неправильный Email"
  String get wrongEmail => "Неправильный Email";
  /// "Необходимо заполнить все поля"
  String get allFields => "Необходимо заполнить все поля";
  /// "Пароль должен быть не короче 8 символов"
  String get minPassLength => "Пароль должен быть не короче 8 символов";
  /// "Вход"
  String get login => "Вход";
  /// "Email"
  String get email => "Email";
  /// "Имя"
  String get name => "Имя";
  /// "Фамилия"
  String get surname => "Фамилия";
  /// "Пароль"
  String get password => "Пароль";
  /// "Добрый день!"
  String get hello => "Добрый день!";
  /// "Забыли пароль?"
  String get forgotPassword => "Забыли пароль?";
  /// "Регистрация"
  String get register => "Регистрация";
  /// "Пароли не совпадают"
  String get passwordsNotMatch => "Пароли не совпадают";
  /// "Здесь будут ваши уведомления"
  String get emptyNotifications => "Здесь будут ваши уведомления";
  /// "Здесь будут ваши концерты"
  String get emptySchedule => "Здесь будут ваши концерты";
  /// "typograph — Регистрация музыканта"
  String get titleRegistration => "typograph — Регистрация музыканта";
  /// "Подтвердить"
  String get confirm => "Подтвердить";
  /// "Отменить"
  String get cancel => "Отменить";
  /// "поиск..."
  String get search => "поиск...";
  /// "ваше сообщение"
  String get message => "ваше сообщение";
}

class _I18n_ru_RU extends I18n {
  const _I18n_ru_RU();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  /// "Wait please, loading..."
  @override
  String get loading => "Wait please, loading...";
  /// "typograph"
  @override
  String get title => "typograph";
  /// "Title is undefined"
  @override
  String get noTitle => "Title is undefined";
  /// "Description is undefined"
  @override
  String get noDesc => "Description is undefined";
  /// "Location is undefined"
  @override
  String get noLocation => "Location is undefined";
  /// "Recommend"
  @override
  String get recommend => "Recommend";
  /// "All"
  @override
  String get all => "All";
  /// "Performances"
  @override
  String get performances => "Performances";
  /// "Schedule"
  @override
  String get schedule => "Schedule";
  /// "Account"
  @override
  String get account => "Account";
  /// "Wrong Email"
  @override
  String get wrongEmail => "Wrong Email";
  /// "All fields are required"
  @override
  String get allFields => "All fields are required";
  /// "Password can't be shorter than 8 characters"
  @override
  String get minPassLength => "Password can't be shorter than 8 characters";
  /// "Login"
  @override
  String get login => "Login";
  /// "Email"
  @override
  String get email => "Email";
  /// "Name"
  @override
  String get name => "Name";
  /// "Surname"
  @override
  String get surname => "Surname";
  /// "Password"
  @override
  String get password => "Password";
  /// "Good afternoon!"
  @override
  String get hello => "Good afternoon!";
  /// "Forgot your password?"
  @override
  String get forgotPassword => "Forgot your password?";
  /// "Register"
  @override
  String get register => "Register";
  /// "Passwords do not match"
  @override
  String get passwordsNotMatch => "Passwords do not match";
  /// "Your notifications will be here"
  @override
  String get emptyNotifications => "Your notifications will be here";
  /// "Your concerts will be here"
  @override
  String get emptySchedule => "Your concerts will be here";
  /// "typograph — Musician registration"
  @override
  String get titleRegistration => "typograph — Musician registration";
  /// "Confirm"
  @override
  String get confirm => "Confirm";
  /// "Cancel"
  @override
  String get cancel => "Cancel";
  /// "search..."
  @override
  String get search => "search...";
  /// "message"
  @override
  String get message => "message";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ru", "RU"),
      Locale("en", "US")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("ru_RU" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("ru" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_ru_RU());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}